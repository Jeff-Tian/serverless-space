# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-space
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  lambdaHashingVersion: 20201221
  environment:
    YUQUE_TOKEN: ${env:YUQUE_TOKEN}
    YUQUE_PATH: /tmp/yuque.json
    CACHE_URL: ${env:CACHE_URL}
    GITHUB_TOKEN: ${env:GITHUB_TOKEN}
    SYNC_GITHUB_PERSONAL_ACCESS_TOKEN: ${env:SYNC_GITHUB_PERSONAL_ACCESS_TOKEN}
    APOLLO_GRAPH_REF: Serverless-Space@current
    APOLLO_KEY: ${env:APOLLO_KEY}
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'

  # you can overwrite defaults here
  stage: stg
  #  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:CreateTable"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateTimeToLive"
      Resource: "arn:aws:dynamodb:us-east-1:443862765029:table/cache-table"
    - Effect: Allow
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"

  tracing:
    apiGateway: true
    lambda: true

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!layers/**'
    - '!gatsby/**'
    - '!src/**'
    - '!e2e/**'
    - '!aws/**'
#    - include-me.js
#    - include-me-dir/**

#package:
#  exclude:
#    - node_modules/**
#    - venv/**
#    - layers/**

constructs:
  jobs:
    type: queue
    worker:
      handler: handler.consumer
      timeout: 900
      layers:
        - { Ref: LibLambdaLayer }
        - { Ref: JefftianLambdaLayer }
      environment:
        MP_APPID: ${env:MP_APPID}
        MP_SECRET: ${env:MP_SECRET}
      vpc:
        securityGroupIds:
          - Fn::GetAtt: [ VPCStaticIP, DefaultSecurityGroup ]
        subnetIds:
          - Ref: SubnetPrivate
        iamRoleStatements:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
            Resource: '*'

functions:
  hello:
    handler: handler.hello
    layers:
      - { Ref: LibLambdaLayer }
      - { Ref: JefftianLambdaLayer }
    events:
      - http:
          path: users/create
          method: get
      - http:
          path: stg/users/create
          method: get
    environment:
      SERVERLESS_EXPRESS_PLATFORM: aws
  api:
    handler: handler.api
    layers:
      - { Ref: LibLambdaLayer }
      - { Ref: JefftianLambdaLayer }
    events:
      - http:
          path: api/
          method: ANY
          cors: true
      - http:
          path: stg/api/
          method: ANY
          cors: true
      - http:
          path: api/{proxy+}
          method: ANY
          cors: true
      - http:
          path: stg/api/{proxy+}
          method: ANY
          cors: true
    environment:
      SERVERLESS_EXPRESS_PLATFORM: aws
  webhook:
    handler: dist/webhook/main.handler
    timeout: 900
    layers:
      - { Ref: LibLambdaLayer }
      - { Ref: JefftianLambdaLayer }
      - { Ref: GatsbypluginsLambdaLayer }
    events:
      - http:
          method: ANY
          path: webhook/
          cors: true
      - http:
          method: ANY
          path: stg/webhook/
          cors: true
      - http:
          method: ANY
          path: 'webhook/{proxy+}'
          cors: true
      - http:
          method: ANY
          path: 'stg/webhook/{proxy+}'
          cors: true
    environment:
      SERVERLESS_EXPRESS_PLATFORM: aws
      YUQUE_TOKEN: ${env:YUQUE_TOKEN}
      YUQUE_PATH: /tmp/yuque.json
      CACHE_URL: ${env:CACHE_URL}
      GITHUB_TOKEN: ${env:GITHUB_TOKEN}
      SYNC_GITHUB_PERSONAL_ACCESS_TOKEN: ${env:SYNC_GITHUB_PERSONAL_ACCESS_TOKEN}
      ONLINE: true
      QUEUE_URL: ${construct:jobs.queueUrl}
      WECOM_NOTIFICATION_URL: ${env:WECOM_NOTIFICATION_URL}
  nest:
    handler: dist/main.handler
    timeout: 900
    layers:
      - { Ref: LibLambdaLayer }
      - { Ref: JefftianLambdaLayer }
      - { Ref: GatsbypluginsLambdaLayer }
    events:
      - http:
          method: ANY
          path: nest/
          cors: true
      - http:
          method: ANY
          path: stg/nest/
          cors: true
      - http:
          method: ANY
          path: 'nest/{proxy+}'
          cors: true
      - http:
          method: ANY
          path: 'stg/nest/{proxy+}'
          cors: true
    environment:
      SERVERLESS_EXPRESS_PLATFORM: aws
      YUQUE_TOKEN: ${env:YUQUE_TOKEN}
      YUQUE_PATH: /tmp/yuque.json
      CACHE_URL: ${env:CACHE_URL}
      GITHUB_TOKEN: ${env:GITHUB_TOKEN}
      SYNC_GITHUB_PERSONAL_ACCESS_TOKEN: ${env:SYNC_GITHUB_PERSONAL_ACCESS_TOKEN}
      ONLINE: true
      QUEUE_URL: ${construct:jobs.queueUrl}
      WECOM_NOTIFICATION_URL: ${env:WECOM_NOTIFICATION_URL}

  gateway:
    handler: dist/gateway/main.handler
    timeout: 900
    layers:
      - { Ref: LibLambdaLayer }
      - { Ref: JefftianLambdaLayer }
    events:
      - http:
          method: ANY
          path: gateway/
          cors: true
      - http:
          method: ANY
          path: stg/gateway/
          cors: true
      - http:
          method: ANY
          path: 'gateway/{proxy+}'
          cors: true
      - http:
          method: ANY
          path: 'stg/gateway/{proxy+}'
          cors: true
    environment:
      SERVERLESS_EXPRESS_PLATFORM: aws
      STRAPI_API_KEY: ${env:STRAPI_API_KEY}

  gatsby:
    handler: dist/gatsby.handler
    timeout: 30
    layers:
      - { Ref: LibLambdaLayer }
      - { Ref: JefftianLambdaLayer }
      - { Ref: GatsbypluginsLambdaLayer }
    events:
      - http:
          method: ANY
          path: gatsby/
      - http:
          method: ANY
          path: stg/gatsby/
      - http:
          method: ANY
          path: 'gatsby/{proxy+}'
      - http:
          method: ANY
          path: 'stg/gatsby/{proxy+}'
    environment:
      SERVERLESS_EXPRESS_PLATFORM: aws
      YUQUE_TOKEN: ${env:YUQUE_TOKEN}
      YUQUE_PATH: /tmp/yuque.json
      GITHUB_TOKEN: ${env:GITHUB_TOKEN}

plugins:
  - serverless-plugin-layer-manager
  - serverless-offline
  - serverless-express
  - serverless-lift

custom:
  plugin:
    layerManager:
      NodeLayers:
        unsafePermissions: false
  layerConfig:
    installLayers: false

layers:
  lib:
    path: layers
    name: space-lib
    description: My dependencies
    retain: true
  jefftian:
    path: jefftian
    name: jefftian-lib
    description: jefftian dependencies
    retain: true
  gatsbyplugins:
    path: gatsby-plugins
    name: gatsby-plugins-lib
    description: gatsby plugins
    retain: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# 有点费钱，暂时删除
#resources:
# Resources: # Resources created according to blog post:
#   # http://techblog.financialengines.com/2016/09/26/aws-lambdas-with-a-static-outgoing-ip/
#
#   # Step 1: Create a new VPC
#   VPCStaticIP:
#     Type: AWS::EC2::VPC
#     Properties:
#       CidrBlock: 11.0.0.0/16
#       Tags:
#         - Key: Name
#           Value: ${self:service}-${self:provider.stage}-vpc
#
#   # Step 2: Create 2 Subnets
#   SubnetPublic:
#     Type: AWS::EC2::Subnet
#     Properties:
#       AvailabilityZone: ${self:provider.region}b
#       CidrBlock: 11.0.0.0/24
#       Tags:
#         - Key: Name
#           Value: ${self:service}-${self:provider.stage}-public-subnet
#       VpcId:
#         Ref: VPCStaticIP
#
#   SubnetPrivate:
#     Type: AWS::EC2::Subnet
#     Properties:
#       AvailabilityZone: ${self:provider.region}b
#       CidrBlock: 11.0.1.0/24
#       Tags:
#         - Key: Name
#           Value: ${self:service}-${self:provider.stage}-private-subnet
#       VpcId:
#         Ref: VPCStaticIP
#
#   # Step 3: Create an Internet Gateway
#   InternetGateway:
#     Type: AWS::EC2::InternetGateway
#     Properties:
#       Tags:
#         - Key: Name
#           Value: ${self:service}-${self:provider.stage}-igw
#
#   # Attach Internet Gateway to VPC
#   VPCGatewayAttachment:
#     Type: AWS::EC2::VPCGatewayAttachment
#     Properties:
#       InternetGatewayId:
#         Ref: InternetGateway
#       VpcId:
#         Ref: VPCStaticIP
#
#   # Step 4: Create a public Route Table and Assign it to our public route
#   RouteTablePublic:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId:
#         Ref: VPCStaticIP
#       Tags:
#         - Key: Name
#           Value: ${self:service}-${self:provider.stage}-public-route
#
#   RoutePublic:
#     Type: AWS::EC2::Route
#     Properties:
#       DestinationCidrBlock: 0.0.0.0/0
#       GatewayId:
#         Ref: InternetGateway
#       RouteTableId:
#         Ref: RouteTablePublic
#
#   SubnetRouteTableAssociationPublic:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId:
#         Ref: RouteTablePublic
#       SubnetId:
#         Ref: SubnetPublic
#
#   # Step 5: Create a NAT Gateway
#   # Before creating NAT Gateway, we need to create Elastic IP with vpc scope
#   EIP:
#     Type: AWS::EC2::EIP
#     Properties:
#       Domain: vpc
#
#   NatGateway:
#     Type: AWS::EC2::NatGateway
#     Properties:
#       AllocationId:
#         Fn::GetAtt: [ EIP, AllocationId ]
#       SubnetId:
#         Ref: SubnetPublic
#
#   # In tutorial NAT Gateway is attached as default route 0.0.0.0/0 in main Route Table.
#   # Main Route Table is created implicitely during VPC creation and CloudFormation
#   # has no access to its ID. To overcome this limitation we create additional Route Table.
#   RouteTablePrivate:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId:
#         Ref: VPCStaticIP
#       Tags:
#         - Key: Name
#           Value: ${self:service}-${self:provider.stage}-private-route
#
#   RoutePrivate:
#     Type: AWS::EC2::Route
#     Properties:
#       DestinationCidrBlock: 0.0.0.0/0
#       NatGatewayId:
#         Ref: NatGateway
#       RouteTableId:
#         Ref: RouteTablePrivate
#
#   SubnetRouteTableMainAssociationPrivate:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       RouteTableId:
#         Ref: RouteTablePrivate
#       SubnetId:
#         Ref: SubnetPrivate

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
